import { Events } from '../emitter/emitter';
import { RuntimeCache } from '../utils/cache';
import type * as LocationType from './location';
export interface HistoryState {
    state: Record<string, any> | null;
    title: string;
    url: string;
}
type Options = {
    window: any;
};
type HistoryContext = {
    location: LocationType.Location;
    stack: HistoryState[];
    cur: number;
};
export declare class History extends Events {
    #private;
    constructor(location: LocationType.Location, options: Options);
    get length(): number;
    get state(): Record<string, any> | null;
    go(delta: number): void;
    back(): void;
    forward(): void;
    pushState(state: any, title: string, url: string): void;
    replaceState(state: any, title: string, url: string): void;
    get cache(): RuntimeCache<HistoryContext>;
}
export {};
