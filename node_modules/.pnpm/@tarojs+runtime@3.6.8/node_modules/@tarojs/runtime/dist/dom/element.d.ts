import { ClassList } from './class-list';
import { TaroNode } from './node';
import { Style } from './style';
import type { Attributes, Func } from '../interface';
import type { TaroEvent } from './event';
export declare class TaroElement extends TaroNode {
    tagName: string;
    props: Record<string, any>;
    style: Style;
    dataset: Record<string, unknown>;
    innerHTML: string;
    constructor();
    private _stopPropagation;
    get id(): string;
    set id(val: string);
    get className(): string;
    set className(val: string);
    get cssText(): string;
    get classList(): ClassList;
    get children(): TaroElement[];
    get attributes(): Attributes[];
    get textContent(): string;
    set textContent(text: string);
    hasAttribute(qualifiedName: string): boolean;
    hasAttributes(): boolean;
    get focus(): () => void;
    set focus(value: () => void);
    blur(): void;
    setAttribute(qualifiedName: string, value: any): void;
    removeAttribute(qualifiedName: string): void;
    getAttribute(qualifiedName: string): string;
    getElementsByTagName(tagName: string): TaroElement[];
    getElementsByClassName(className: string): TaroElement[];
    dispatchEvent(event: TaroEvent): boolean;
    addEventListener(type: any, handler: any, options: any): void;
    removeEventListener(type: any, handler: any, sideEffect?: boolean): void;
    static extend(methodName: string, options: Func | Record<string, any>): void;
}
